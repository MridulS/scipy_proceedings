:author: Sebastian Benthall
:email: sb@ischool.berkeley.edu
:institution: UC Berkeley School of Information

--------------------------------------------------------------
Testing Generative Models of Online Collaboration with BigBang
--------------------------------------------------------------

.. class:: abstract

   We introduce BigBang, a new Python toolkit for analyzing 
   online collaborative communities such as those that 
   build open source software.
   Mailing lists serve as critical communications infrastructure for
   many communities, including several of the open source software 
   development communities that build scientific Python packages.
   BigBang provides tools for analyzing mailing lists.
   In this paper, we present results from testing a generative
   model of online collaboration in mailing lists.
   We derive a social network from archival mailing list history
   and test the Barabási-Alpert model of network formation
   against this data.
   We find the model does not fit the data, but that mailing list
   social networks share statistical regularities not explained in
   existing complex systems literature.
   This suggests room for a new generative model of network formation
   in the open collaborative setting.

.. class:: keywords

   mailing lists, network analysis


Introduction
------------

Open source software communites such as those that produce many scientific 
Python packages are a critical part of contemporary scientific organization.
A distinguishing feature of these communities is their heavy use of
Internet-based infrastructure, such as mailing lists, version control systems, and
issue trackers, for managing communications and organizing work on distributed teams.
This data is often deliberately publicly accessible as open source best practices
include the "conspicuous use of archives" [Fogel]_.
The availability of these digital records are also an excellent resource for
the researcher interested in sociotechnical organization and collaboration
within science.

This paper introduces BigBang, a Python project whose purpose is the collection,
preprocessing, and analysis of data from open collaborative communities.
Built for the use case of studying the Scientific Python communities in particular,
it generalizes to other communities and supports fruitful comparisons between them.

To demonstrate the potential of this approach, this paper will explore the
structure of mailing list discussions in the context of open collaborative projects.
We extract social network data from the archives of public mailing lists and test
the plausibility that these graphs were generated by Barabási-Alpert network model.
We find that of the mailing lists we've analyzed, none exhibit two features of
Barabási-Alpert networks: power law degree distribution and zero degree assortativity.
This result suggests the possibility of future work of scientifically developing a
generative model of collaboration.

BigBang Overview
----------------

Launched last year and presented at SciPy 2014, BigBang is a software project 
that aims to provide researchers a complete toolkit for the scientific analysis
of open online collaborative communities.
Though applicable to many domains, research into online collaboration has
special relevance to practicioners of computationally intensive open science.
Through it scientific programming communities such as Scientific Python can
achieve a quantitative understanding of their own work and innovation process.

Thorough study of these kinds of communities requires the collection and
rationalization of many heterogenous and high-dimensional data sources,
including but not limited to:

- mailing lists
- version control systems such as Git
- issue trackers such as GitHub and Bugzilla

This data is complex in that it has many dimensions that afford very different
kinds of analysis:

- **Time.** All data from online collaboration infrastructure is timestamped,
  affording use of time series methods.
- **Text.** Email message bodies, issue contents, and commit messages in version
  control are all text data suitable for study with natural language processing 
  techniques.
- **Social network.** Participants in the project are individuals linked by relational
  ties of communication. Hence these data afford study through social
  network analysis techniques.
- **Software static analysis.** Source code in version control is complex data containing
  the definition of many interelated variables, functions, classes, and modules. Static
  analysis and compilation techniques from computer science can be used to study these
  entities within the software itself.

The richness and granularity of the data from open source software communities and other
open on-line collaborative projects promise the answers to many research questions about
software engineering, innovation, social organization, and more.
The catch is that with data that is so multifaceted, preprocessing the data is an
engineering-intensive endeavor.

The versatility and scope of open source Scientific Python packages makes building
a generic research infrastructure for analyzing these communities a possibility within 
reach. Architecturally, BigBang is a Python package that includes Scientific Python
libraries for time series analysis, natural language processing, network analysis,
and software analysis as dependencies.

BigBang includes methods for collecting research data from sources on the web about
the activity of open collaborative communities. At the time of this writing,
BigBang supports data collection from Mailman, the mailing list service, as well
as other `.mbox` formatted email archives. It also supports data collection
from Git repositories. Future versions will have methods for collecting data
from issue trackers.

The BigBang repository contains an `examples` directory of Jupyter notebooks
demonstrating its functionality and exploring lines of research inquiry.
Researchers can contribute to the project by submitting Jupyter notebooks to the
repository for review through the GitHub Pull Request system.
Source code that performs preprocessing that is usable by multiple computational
experiments is in a separate source code directory that can be imported as a
Python module.

In the context of Scientific Python, BigBang is deliberately recursive.
It is a Python project that depends on many other scientific Python projects.
It is designed to study, among other things, dependencies and interactions between 
the Scientific Python technologies and communities.
Our goal is for BigBang to provide a new means for these communities to engage
in scientific self-management.

Email data collection
---------------------

BigBang supports collection of email data.
It can do this either by scraping the archival pages of a Mailman instance,
or by importing an `.mbox` formatted file.


Deriving interaction graphs
---------------------------

Email is archived in the same text format that email is sent in, as specified in
RFC2822 [RFC2822]_.
Every email is comprised of a message body and a number of metadata headers
that are essential for email processing and presentation.

For our study, we have been interested in extracting the implied social
network from an email archive of a public mailing list. To construct this
network, we have used the `From`, `Message-ID`, and `In-Reply-To` headers
of the email.

The `From` field of an email contains data about the sender of the message.
This often includes both a full name and an email address of the sender.
As this is set by the email client (note: or is it the mailing list server?)
a single person is often represented differently in the `From` field
across many emails. See *Entity Resolution* for our strategies for
resolving entities from divergent email headers.

The `Message-ID` header provides a globally unique identification string
for every email.
This is accomplished by (how?).
The `In-Reply-To` header is set when an email is sent as a reply to
another email.
The reply's `In-Reply-To` header will match the `Message-ID` of the
original email.

We construct the directed *interaction graph* :math:`G` for a set of emails as follows:

* For every email :math:`e`, add a node :math:`v_{f(e)}` to :math:`G` corresponding 
  to its `From` header :math:`f(e)`  and set its `sent` attribute :math:`v_{f(e)}` 
  (notation is sloppy here -- can we write a pseudocode algorithm?)
* If :math:`e_1` is a reply to another email :math:`e_2`, create an edge between
  their corresponding nodes or, if it already exists, increment its weight by 1

BigBang implements this interaction graph creation using Python's native
email processing libraries, `pandas`, and `networkx`.

.. code-block:: python

   import networkx as nx

   def messages_to_interaction_graph(messages):
       """
       *messages* is a Pandas DataFrame, each row
       containing the body and header metadata for
       an email from the archive.
       Messages should be in chronological order.

       Returns a NetworkX DiGraph (directed graph),
       the nodes of which are mailing list participants.

       Nodes have a 'sent' attribute indicating number
       of emails they have sent within the archive.

       Edges from i to j indicate that i has sent at least
       one reply to j. The weight of the edge is equal
       to the number of replies sent from i to j.
       """

       IG = nx.DiGraph()

       from_dict = {}

       sender_counts = {}
       reply_counts = {}

       for m in df.iterrows():
           m_from = m[1]['From']

           from_dict[m[0]] = m_from
           sender_counts[m_from] = \\
               sender_counts.get(m_from, 0) + 1
           IG.add_node(m_from)

           if m[1]['In-Reply-To'] is not None:
               reply_to_mid = m[1]['In-Reply-To']

               if reply_to_mid in from_dict:
                   m_to = from_dict[reply_to_mid]
                   reply_counts[m_from][m_to] = \\
                       reply_counts[m_from].get(m_to, 0) + 1

       for sender, count in sender_counts.items():
           IG.node[sender]['sent'] = count

       for m_from, edges in reply_counts.items():
           for m_to, count in edges.items():
               IG.add_edge(m_from, m_to, weight=count)

       return IG

The motivation for constructing interaction graphs in this way is to build a
concise representation of the social network implied by email data.
We posit that building a social network representation based on actual messages
sent between people provides a more granular and faithful description of
social relationships than one based on higher-level descriptions of social
relationships or ties from web services such as Facebook 'friends' and
Twitter 'followers'

One potential objection to this approach is that since the data we are considering comes from public
mailing lists where every message has a potentially large audience, it may be
misleading to build a network representation on the assumption that a reply
is directed primarily at the person who was replied to and not more broadly
to other participants in a thread or, even more broadly, to the mailing list
as a whole.
While this is a valid objection, it points to the heart of what is distinctive
about this research.
While there have been many studies of social network formation in conventional
settings, the conditions of open collaboration are potentially quite different.
Theoretically, we expect them to be explicitly and collectively goal-directed,
self-organized for efficient action as opposed to positional 
social advantage, and designed around an archiving system for the sake of
efficiency.
Understanding the statistical properties of this particular form of social
organization, as opposed to others, is the very purpose of this empirical work.

*Interaction graph study*.
By looking at the *Reply-To* header of the emails, we
are able to construct a graph of who replies to who in the email list. (How?)
Drawing on (x,y, and z) we are studying the empirical properties of these
networks in order to come up with a generative model of community graph.
Whereas (Barabási reference) models graphs with power-law degree distribution,
we find (verify using Clauset et al. method) that degree distribution in
these graphs is log normally distributed. Moreover, whereas [Newman2002]_
hypothesizes that socially generated graphs will be characterized by high
degree assortativity, we find empirically that these interaction graphs
have degree assortativity comparable with biological and technical networks.

Entity Resolution
-----------------

Empirically, over the extent of a mailing list's archival
data it is common for the *From* fields of emails to vary even when the
email is coming from the same person. Not only do people sometimes change their
email address or use multiple addresses to interact with the same list, but
also different email clients may represent the same email address in the *From*
header in different ways. BigBang includes automated techniques for resolving
these entities, cleaning the data for downstream processing.

Data from the `From` header of messages stored by Mailman is most often represented
in a form that includes both a full name representation and an email representation.
Unfortunately these fields can vary widely for one person. The following list
shows some of the variability that might appear for a single prolific sender.

.. table:: Examples of variations in `From` header values corresponding to the
           same person in an email archive. Some of these changes reflect changes
           of email address. Others are artifacts of the users' email clients and
           the mailing list software. :label:`mtable`

   +----------------------------------------------------------------------------+
   | Variations                                                                 |
   +============================================================================+
   | ``tyrion.lannister at gmail.com (Tyrion Lannister)``                       |
   +----------------------------------------------------------------------------+
   | ``Tyrion.Lannister at gmail.com (Tyrion Lannister)``                       |
   +----------------------------------------------------------------------------+
   | ``Tyrion.Lannister at gmail.com (Tyrion.Lannister@gmail.com)``             |
   +----------------------------------------------------------------------------+
   | ``Tyrion.Lannister at gmail.com (Tyrion.Lannister at gmail.com)``          |
   +----------------------------------------------------------------------------+
   | ``Tyrion.Lannister@gmail.com (Tyrion Lannister)``                          |
   +----------------------------------------------------------------------------+
   | ``Tyrion.Lannister@gmail.... (Tyrion Lannister)``                          |
   +----------------------------------------------------------------------------+
   | ``Tyrion.Lannister@gmail.com``                                             |
   +----------------------------------------------------------------------------+
   | ``Tyrion.Lannister at gmail.com (Tyrion)``                                 |
   +----------------------------------------------------------------------------+
   | ``tyrion at lanister.net (Tyrion Lannister)``                              |
   +----------------------------------------------------------------------------+
   | ``halfman@council.kings-landing.gov (Tyrion Lannister)``                   |
   +----------------------------------------------------------------------------+
   | ``halfman@council.kings-landing.gov (Tyrion Lannister, Hand of the King)`` |
   +----------------------------------------------------------------------------+
   | ``halfman@council.kings-landing.gov (halfman@council.kings-landing.gov)``  |
   +----------------------------------------------------------------------------+
   | ``tyrion+hand at lanister.net (Tyrion Lannister)``                         |
   +----------------------------------------------------------------------------+
   | ``tyrion.lannister at gmail.com (=?UTF-8?B?RGF2aWQgQWJpw6Fu?=)``           |
   +----------------------------------------------------------------------------+
   | ``"Tyrion Lannister" <Tyrion.Lannister@gmail.com>``                        |
   +----------------------------------------------------------------------------+

Variation in entity representation is a source of noise in our research and an
ongoing area of development for BigBang.
For the study in this paper, we have implemented a heuristic system for
entity matching.
First we standardize the data by converting it to lower case and normalizing
" at " and "@". Then we parse out the email and full name subfields of the
data and look for exact matches.
Under this procedure, all of the above email addresses would be collapsed into a single
entity.

In our interaction graph study, this has the effect of combining several nodes into a single one
in a way that's similar to the (cite) blockmodel technique.
The edges to and from the derived node are weighted by the sum of the edges of the original
nodes.
The `sent` attribute of the new node is also set as the sum of the `sent` attribute of the
original nodes.

Preferential attachment model
-----------------------------

A early result in the study of complex networks was the observation that many networks
existing in nature exhibit a scale-free degree distribution.
This means that the distribution of the number of edges of each node in the network (the
node's *degree*) is a power law distribution, characterized by the formula: 

.. math::

   formula here

The other most widely known random graph model, the Erdős-Rénri model, produces
networks with normal(?) degree distribution.
Barabási and Alpert [BarabásiAlbert]_ have proposed a model of network generation
that produces graphs with scale-free degree distribution.
The Barabási-Alpert model is now widely known in the literature.

The attractiveness of the Barabási-Alpert model is due in part to its being a
generative model, meaning that it describes a process for creating data of an
observed distribution, as opposed to being simply a description of the distribution
itself.
This gives the Barabási-Alpert model explanatory power.

In particular, the Barabási-Alpert model attributes the scale-free distribution of
node degree to a *preferential attachment* mechanism. 
The network is formed by beginning with a small number :math:`m_0` of nodes and adding
new nodes, connecting each new node to :math:`m < m_0` nodes, where the probability
of connecting to node :math:`i` is relative to the prior degree of that node,
:math:`k_i`:  adding new nodes to the network one by one. 

.. math::

   \Pi(k_i) = \frac{k_i}{\sum_{j} k_j}


[AlbertBarabási]_

The Barabási-Alpert model is favored for its simplicity, its intuitively clear mechanism 
of preferential attachment, and for its analytic tractability.
As said above, the degree distribution of Barabási-Alpert networks is power law.

Degree assortativity
--------------------

Degree assortativity is the correlation between degrees of adjacent nodes in the network.
Following the definitions of [Newman2003]_, the degree assorativity coefficient is

.. math::

   r = \frac{\sum_{jk}jk(e_{jk} - q_{j}q_{k}))}{\sigma_{q}^{2}}

In the above formula, :math:`e_{jk}` is the fraction of edges the connect vertices
of degree :math:`j + 1` and :math:`k + 1`, i.e. the degrees of the connected vertices
not including the connecting edge itself. [Newman2003] calls this *excess degree*.
The value :math:`q_k` is the distribution of excess degree.

.. math::

   \sum_{j} e_{jk} = q_{k}

The value :math:`\sigma_{q}` is the standard deviation of :math:`q_k`. [TODO: I'm using directed
assortativity here, yes? And what about weighted degrees?]

Degree assortativity in complex networks is studied by [Newman2002]_, who makes the intriguing 
claim that observed social networks, such as coauthorship networks, exhibit positive degree
assortativity, while technical and biological networks exhibit negative degree assortativity.

Newman also notes that the degree assortativity of Barabási-Alpert networks is zero.
Variations on the Barabási-Alpert model do have other properties.
(cite: http://arxiv.org/pdf/cond-mat/0402315.pdf)

Studies have supported the role of a preferential attachment mechanism in social network
formation [Zhou2011]_ [Tinatti2012]_.
However, these studies do not take degree assortativity into account.
This leaves open the question of whether the Barabási-Alpert model is sufficient to
characterize these networks.

Power law or log normal?
------------------------

A further challenge to the Barabási-Alpert model comes from [Clauset2007]_, who argue that
many conventionally accepted techniques for fitting power law distributions to empirical data 
are biased and unsound.
They propose a Bayesian technique for testing power law distributions.
By computing the likelihood of the data being generated by a power law distribution and
comparing it with the likelihood of it being generated by other heavy-tail distributions,
such as the log normal distribution, they provide a statistically sound basis for model
comparison.
The Clauset et al. method also carefully considers only the tail of the data, picking a
cutoff value below which data are ignored.
This method of testing power law distributions is implemented in Python in the `powerlaw`
package by [Alstott2014]_

From a Bayesian perspective, the ratio of likelihoods represents how much one should
update ones beliefs based on observation of data.
In this case, the computed likelihood ratio of the data being generated by a power law
over a log normal distribution would be interpreted as how much one should be
persuaded that the data came from a power law distribution based on ones prior
belief in the originary distribution of data in general.

While this may be a perplexingly abstract way of considering the problem for a
non-Bayesian, there is an argument that log normal distributions should be
given a higher prior probability than power law distributions.
This is because of the Central Limit Theorem, from which it follows that
a log normal distribution would result from the multiplication of many
other otherwise distributed factors.

There are two consequences of these considerations.
First, it makes sense to consider log normal distributions as a kind of null hypotheses
against which empirical claims to power law generation must be proven.
Second, it suggest that where a log normal is discovered, the generative mechanism that
produced it is not the same as the generative mechanism that produces a power law.
In particular, we would not expect a network that exhibits a log normal power law
distribution to be generated by preferential attachment, at least as formalized
specifically by Barabási and Alpert.


Methods
-------

We built interaction graphs according to the above procedure for 10 mailing lists from open
collaborative communities.
We then computed the degree assortativity of these networks.
We also used the Alstott package to test the degree distribution of these networks using
the Clauset method.

Results
-------

Every mailing list of the 10 we analyzed exhibits degree disassortivity and a significantly
(:math:`p` > .05) better fit to log normal instead of power law distribution.

.. table:: Results of analysis. For each mailing list archive, number of participants :math:`n`,
           computed degree assortativity of the interaction graph, and loglikelihood ratio R and
           statistical significance :math:`p` of comparison of fit between power law and log normal
           distributions. In all cases the interaction graph is disassortative with significantly
           more log normal degree distribution. :label:`mtable`

   +---------------+----------------+-----------+-----------------------+---------+------------+
   | list name     | Source         | :math:`n` |  Degree Assorativity  | R value | :math:`p`  |
   +===============+================+===========+=======================+=========+============+
   | ipython-dev   | SciPy          | 689       | -0.246441169106       | -0.518  |  0.080     |
   +---------------+----------------+-----------+-----------------------+---------+------------+
   | potlatch-dev  | OpenStreetMap  | 75        | -0.0568958403876      | -0.001  |  0.969     |
   +---------------+----------------+-----------+-----------------------+---------+------------+
   | scipy-dev     | SciPy          | 1056      | -0.276991197113       | -0.331  |  0.578     |
   +---------------+----------------+-----------+-----------------------+---------+------------+
   | ipython-user  | SciPy          | 1085      | -0.267104106913       | -0.334  |  0.227     |
   +---------------+----------------+-----------+-----------------------+---------+------------+
   | scipy-user    | SciPy          | 2735      | -0.111360803079       | -0.024  |  0.307     |
   +---------------+----------------+-----------+-----------------------+---------+------------+
   | design        | WikiMedia      | 111       | -0.17722303449        | -3.618  |  0.095     |
   +---------------+----------------+-----------+-----------------------+---------+------------+
   | gendergap     | WikiMedia      | 301       | -0.172107714006       | -0.858  |  0.399     |
   +---------------+----------------+-----------+-----------------------+---------+------------+
   | maps-l        | WikiMedia      | 118       | -0.186099913331       | -0.003  |  0.945     |
   +---------------+----------------+-----------+-----------------------+---------+------------+
   | wikimedia-l   | WikiMedia      | 1729      | -0.155694746786       | -3.645  |  0.074     |
   +---------------+----------------+-----------+-----------------------+---------+------------+
   | hot           | OpenStreetMap  | 524       | -0.199048173004       | -0.851  |  0.403     |
   +---------------+----------------+-----------+-----------------------+---------+------------+


[for some of the smaller networks here, the results are a bit sketchy. it would be better
to include the \math:`x_{min}` values and include data sets above a certain size threshold ]


Discussion
----------

The regularity in these data sets suggests that there is a need for a new network generation
model that results in disassortative graphs with log normal degree distribution.
Building this graph generation model may help us understand better how collaborative communities
grow and form over time.

Possible models include nonlinear Barabási-Alpert: http://arxiv.org/pdf/cond-mat/0402315.pdf

References
----------

.. [Alstott2014] Alstott J, Bullmore E, Plenz D (2014) powerlaw: A Python Package 
                 for Analysis of Heavy-Tailed Distributions. PLoS ONE 9(1): e85777. 
                 doi:10.1371/journal.pone.0085777

.. [AlbertBarabási] Reka Albert and Albert-László Barabási. 2002
                    Statistical mechanics of complex networks.
                    Reviews of Modern Physics, vol 74

.. [BarabásiAlbert] Albert-László Barabási & Reka Albert. Emergence of Scaling 
                    in Random Networks, Science, Vol 286, Issue 5439, 15 October 
                    1999, pages 509-512.

.. [Benthall2013] Benthall, S. 2013. "Reflexive Data Science: An Overview". 
                  http://dlab.berkeley.edu/blog/reflexive-data-science-overview

.. [Clauset2007]  A. Clauset, C.R. Shalizi, and M.E.J. Newman. Power-law distributions 
                  in empirical data. arXiv:0706.1062, June 2007.

.. [Fogel] Fogel, K. 2013 *Producing Open Source Software.* http://producingoss.com/

.. [Newman2002] Newman, M. E. J. 2002. "Assortative mixing in networks."

.. [Newman2003] Newman, M. E. J. 2003. "Mixing patterns in networks."
                Phys. Rev. E 67, 026126
 
.. [RFC2822] Resnick, P. 2001. "Internet Message Format". Network Working Group, IETF.

.. [SocWik] Howard T. Welser, Dan Cosley, Gueorgi Kossinets, Austin Lin, Fedor Dokshin, 
            Geri Gay, and Marc Smith. 2011. *Finding social roles in Wikipedia.* 
            In Proceedings of the 2011 iConference (iConference '11). ACM, New York, NY, USA, 122-129.  

.. [LaborWik] R. Stuart Geiger and Aaron Halfaker. 2013. 
              *Using edit sessions to measure participation in wikipedia.* 
              In Proceedings of the 2013 conference on Computer supported cooperative work (CSCW '13). 
              ACM, New York, NY, USA, 861-870.

.. [SocRole] Gleave, E.; Welser, H.T.; Lento, T.M.; Smith, M.A., 
           *"A Conceptual and Operational Definition of 'Social Role' in Online Community,"* 
           System Sciences, 2009. HICSS '09. 42nd Hawaii International Conference on , 
           vol., no., pp.1,11, 5-8 Jan. 2009

.. [Tinatti2012] Tinati, R., Carr, L., Hall, W. and Bentwood, J.  (2012)  
                 Scale Free: Twitter’s Retweet Network Structure. 
                 At Network Science 2012, Evanston, US.

.. [Zanetti2012] Zanetti, M. and Schweitzer, F. 2012.
                 "A Network Perspective on Software Modularity"
                 ARCS Workshops 2012, pp. 175-186.

.. [Zhou2011] Zhou T, Medo M, Cimini G, Zhang Z-K, Zhang Y-C (2011) 
              Emergence of Scale-Free Leadership Structure in Social 
              Recommender Systems. PLoS ONE 6(7): e20648.
